import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("MNIST_data/",one_hot=True)

#定义神经层的函数
def add_layer(inputs,in_size,out_size,activation_function=None):
    with tf.name_scope('layer'):
        with tf.name_scope('Weights'):
            Weights=tf.Variable(tf.random_normal([in_size,out_size]))
        with tf.name_scope('biases'):
            biases=tf.Variable(tf.zeros([1,out_size])+0.1)
        with tf.name_scope('Wx_plus_b'):
            Wx_plus_b=tf.matmul(inputs,Weights)+biases
        if activation_function is None:
            outputs=Wx_plus_b
        else:
            outputs=activation_function (Wx_plus_b)
        return outputs

def compute_accuracy(v_xs,v_ys):     #导入训练集test的参数
    global prediction  #全局定义
    y_pre=sess.run(prediction,feed_dict={xs:v_xs})  #生成预测值
    correct_prediction=tf.equal(tf.argmax(y_pre,1),tf.argmax(v_ys,1)) #预测值与真实值的是否相同，1表示按行返回
                                    # argmax(，1)按行返回最大值的索引
    accuracy=tf.reduce_mean(tf.cast(correct_prediction,tf.float32))  #看有多少个是对的
    result=sess.run(accuracy,feed_dict={xs:v_xs,ys:v_ys}) #运行得出结果
    return result


# 导入数据
xs=tf.placeholder(tf.float32,[None,784])#每个照片有784=28*28个像素点
ys=tf.placeholder(tf.float32,[None,10])#10个输出 （真实值）

#add输出层
prediction=add_layer(xs,784,10,activation_function=tf.nn.softmax)
#输入为xs,输入的点为784，输出10个，softmax一般用来作classfication ，（预测值）

#计算真实值与预测值之间的误差
cross_entropy=tf.reduce_mean(-tf.reduce_sum(ys*tf.log(prediction),reduction_indices=[1]))
#交叉熵与softmax

#如何让机器学习提升它的准确率
train_step=tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)
#以0.5的效率来减少误差cross_entropy

sess=tf.Session()
#初始化所有
sess.run(tf.initialize_all_variables())

#训练
for i in range(1000):
    batch_xs,batch_ys=mnist.train.next_batch(100) #train训练集
    #batch分批处理，现在每次只学习其中的100个数据
    sess.run(train_step,feed_dict={xs:batch_xs,ys:batch_ys})
    if i%50==0:
        print(compute_accuracy(mnist.test.images,mnist.test.labels))
                    #test训练集

